lines(a2$x,b2,col="red", lwd=2)
kurtosis(a2)
kurtosis(b2)
??kurtosis
library(psych)
kurtosis(a2)
kurtosis(b2)
kurtosi(a2)
kurtosi(b2)
kurtosi(a)
kurtosi(b2)
plot(a2, ylim=c(0,max(c2$y)), axes=F, lwd=2)
lines(a2$x,b2,col="red", lwd=2)
plot(a2, ylim=c(0,max(c2$y)), axes=T, lwd=2)
lines(a2$x,b2,col="red", lwd=2)
s <- 2
c2 <- (1/(2*s))*(1+cos(((a2$x)/s))*pi)
lines(a2$x,b2,col="blue", lwd=2)
lines(a2$x,c2,col="blue", lwd=2)
c2 <- (1/(2*s))*(1+cos(((a2$x)/s)*pi))
lines(a2$x,c2,col="blue", lwd=2)
plot(a2, ylim=c(0,max(c2$y)), axes=T, lwd=2)
lines(a2$x,b2,col="red", lwd=2)
lines(a2$x[a2$x>=-2 & a2$x<=2],c2,col="blue", lwd=2)
plot(a2, ylim=c(0,max(c2$y)), axes=T, lwd=2)
lines(a2$x,b2,col="red", lwd=2)
plot(a2, ylim=c(0,max(a2$y)), axes=T, lwd=2)
lines(a2$x,b2,col="red", lwd=2)
plot(a2, ylim=c(0,max(b2$y)), axes=T, lwd=2)
plot(a2, ylim=c(0,max(b2)), axes=T, lwd=2)
lines(a2$x,b2,col="red", lwd=2)
lines(a2$x[a2$x>=-2 & a2$x<=2],c2[a2$x>=-2 & a2$x<=2],col="blue", lwd=2)
s <- 1/0.2
c2 <- (1/(2*s))*(1+cos(((a2$x)/s)*pi))
plot(a2, ylim=c(0,max(b2)), axes=T, lwd=2)
lines(a2$x,b2,col="red", lwd=2)
lines(a2$x[a2$x>=-2 & a2$x<=2],c2[a2$x>=-2 & a2$x<=2],col="blue", lwd=2)
1/0.2
c2 <- (1/(2*s))*(1+cos(((a2$x)/s)*pi))
plot(a2, ylim=c(0,max(b2)), axes=T, lwd=2)
lines(a2$x,b2,col="red", lwd=2)
lines(a2$x[a2$x>=-s & a2$x<=s],c2[a2$x>=-s & a2$x<=s],col="blue", lwd=2)
plot(a2, ylim=c(0,max(b2)), axes=T, lwd=2)
lines(a2$x,b2,col="red", lwd=2)
lines(c2x,c2y,col="blue", lwd=2)
c2 <- (1/(2*s))*(1+cos(((a2$x)/s)*pi))
c2x <- a2$x[a2$x>=-s & a2$x<=s]
c2y <- c2[a2$x>=-s & a2$x<=s]
plot(a2, ylim=c(0,max(b2)), axes=T, lwd=2)
lines(a2$x,b2,col="red", lwd=2)
lines(c2x,c2y,col="blue", lwd=2)
kurtosi(a)
kurtosi(b2)
kurtosi(c2)
a <- rnorm(10000000000, 0,1)
a2 <- density(a)
library(pracma)
b2 <- (1/2)*sech((pi/2)*a2$x)
s <- 1/0.2
c2 <- (1/(2*s))*(1+cos(((a2$x)/s)*pi))
c2x <- a2$x[a2$x>=-s & a2$x<=s]
c2y <- c2[a2$x>=-s & a2$x<=s]
plot(a2, ylim=c(0,max(b2)), axes=T, lwd=3)
lines(a2$x,b2,col="red", lwd=3)
lines(c2x,c2y,col="blue", lwd=3)
library(psych)
kurtosi(a)
kurtosi(b2)
kurtosi(c2)
a <- rnorm(1000000000, 0,1)
a2 <- density(a)
a <- rnorm(100000000, 0,1)
a2 <- density(a)
library(foreign)
dades <- read.dta("C:/Users/CASA/CloudStation/ORPR/albert_article_reduida.dta")
dades <- read.dta("C:/Users/CASA/CloudStation/ORPR/albert_article_reduida_11.dta")
View(dades)
table(audit_c)
table(dades$audit_c)
table(as.numeric(dades$audit_c))
table(as.numeric(dades$audit_c))
dades$auditc <- dades$audit_c
dades$auditc[dades$auditc==1]<-0
dades$audit_c==1
dades$auditc[dades$audit_c==1]<-0
?factor
dades$auditc <- as.numeric(dades$audit_c)
dades$auditc[dades$auditc==1]<-0
dades$auditc[dades$auditc==2] <- 1
table(as.numeric(dades$auditc))
table(as.numeric(dades$audit_c))
model <- glm(auditc ~ gender, data=dades, family=binomial(link=logit))
summary(model)
?factor
?relevel
dades$sex <- relevel(gender, ref = "female")
dades$sex <- relevel(dades$gender, ref = "female")
model <- glm(auditc ~ gender, data=dades, family=binomial(link=logit))
summary(model)
?glm
library(Epi)
install.packages("epi")
install.packages("Epi")
library(Epi)
ci.lin(model, exp=T)
ci.li(model, exp=T)
?ci.lin
ci.lin(model, Exp=T)
model <- glm(auditc ~ sex, data=dades, family=binomial(link=logit))
summary(model)
ci.lin(model, Exp=T)
?glm
pais <- unique(dades$country)
pais
pais <- as.character(unique(dades$country))
pais
aux <-dades[dades$country==pais[1],]
View(aux)
model <- glm(auditc ~ sex, data=aux, family=binomial(link=logit))
summary(model)
ci.lin(model, Exp=T)
round(ci.lin(model, Exp=T),2)
aux <-dades[dades$country==pais[2],]
model <- glm(auditc ~ sex, data=aux, family=binomial(link=logit))
summary(model)
round(ci.lin(model, Exp=T),2)
pais
aux <-dades[dades$country==pais[1],]
model <- glm(auditc ~ sex, data=aux, family=binomial(link=logit))
summary(model)
round(ci.lin(model, Exp=T),2)
?glm
model2 <- glm(auditc ~ sex, data=aux, family=poisson(link=log))
robcov(model2)
??robcov
library(Hmisc)
robcov(model2)
model2 <- glm(auditc ~ sex, data=aux, family=poisson(link=log))
robcov(model2)
install.packages(c("sandwich", "lmtest"))
model2 <- glm(auditc ~ sex, data=aux, family=poisson(link=log))
library(sandwich) # to get robust estimators
library(lmtest) # to test coefficients
(coef <- coeftest(model2, vcov = sandwich))
exp(coef(model2))
coef
names(coef)
class(coef)
coef[1]
coef[2]
coef[5]
coef[3]
coef[4]
exp(coef[3] + qnorm(0.05 / 2) * coef[4])
# lower 95% CI
exp(coef[3] + qnorm(1 - 0.05 / 2) * coef[4])
qnorm(0.05 / 2)
qnorm(1 - 0.05 / 2)
coef[4]
coef[3]
coef[3]
coef[4]
coef[5]
coef[6]
coef[2,1]
coef["sexmale",1]
coef["sexmale","Estimate"]
coef["sexmale","Std. Error"]
a <- coef["sexmale","Estimate"]
b <- coef["sexmale","Std. Error"]
# upper 95% CI
exp(a + qnorm(0.05 / 2) * b)
# lower 95% CI
exp(a + qnorm(1 - 0.05 / 2) * b)
install.packages("doBy")
(coef <- coeftest(model2, vcov = sandwich))
ci.lin(coef)
?ci.lin
a <- coef[,"Estimate"]
a
b <- coef[,"Std. Error"]
b
ci.lin(model2, Exp=T)
coef
class(coef)
?coeftest
dim(coef)
coef.exp <- coef[,1:2]
kk <- coef[,1:2]
?matrix
nrow(coef)
rownames(coef)
coef.exp <- matrix(NA,nrow=nrow(coef), ncol=2,rownames=rownames(coef), colnames=c("exp(Est.)", "2.5%", "97.5%"))
coef.exp <- matrix(NA,nrow=nrow(coef), ncol=2,rownames=rownames(coef), col.names=c("exp(Est.)", "2.5%", "97.5%"))
coef.exp <- matrix(NA,nrow=nrow(coef), ncol=2,dimnames=c(rownames(coef), c("exp(Est.)", "2.5%", "97.5%")))
coef.exp <- matrix(NA,nrow=nrow(coef), ncol=2,dimnames=list(rownames(coef), c("exp(Est.)", "2.5%", "97.5%")))
coef.exp <- matrix(NA,nrow=nrow(coef), ncol=3, dimnames=list(rownames(coef), c("exp(Est.)", "2.5%", "97.5%")))
coef.exp
coef.exp[,1] <- exp(coef[,"Estimate"])
coef.exp
coef.exp[,2] <- exp(coef[,"Estimate"] + qnorm(1 - 0.05 / 2) * coef[,"Std. Error"])
coef.exp[,3] <- exp(coef[,"Estimate"] + qnorm(0.05 / 2) * coef[,"Std. Error"])
coef.exp
a <- c(1,2)
b <- c(5,4)
a+b
?doby
coef.exp <- matrix(NA,nrow=nrow(coef), ncol=3, dimnames=list(rownames(coef), c("exp(Est.)", "2.5%", "97.5%")))
##RR
coef.exp[,"exp(Est.)"] <- exp(coef[,"Estimate"])
##lower 95% CI
coef.exp[,"2.5%"] <- exp(coef[,"Estimate"] + qnorm(1 - 0.05 / 2) * coef[,"Std. Error"])
##upper 95% CI
coef.exp[,"97.5%"] <- exp(coef[,"Estimate"] + qnorm(0.05 / 2) * coef[,"Std. Error"])
coef.exp
library(shiny)
runExample("01_hello")
install.packages("shiny")
install.packages("shiny")
install.packages("samplesize")
library(samplesize)
alpha <- 0.05
#Tipus de contrast bilateral
power <- 0.8
rao <- 1
sd <- 0.1
dif <- 0.3
perdues <- 0.1
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "balanced", variance = "equal")
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "unbalanced", variance = "equal")
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "unbalanced", variance = "equal")
alpha <- 0.05
#Tipus de contrast bilateral
power <- 0.8
rao <- 2
sd <- 0.1
dif <- 0.3
perdues <- 0.1
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "unbalanced", variance = "equal")
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "balanced", variance = "equal")
alpha <- 0.05
#Tipus de contrast bilateral
power <- 0.8
rao <- 1
sd <- 10
dif <- 0.3
perdues <- 0.1
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "balanced", variance = "equal")
alpha <- 0.05
#Tipus de contrast bilateral
power <- 0.8
rao <- 4
sd <- 10
dif <- 0.3
perdues <- 0.1
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "unbalanced", variance = "equal")
alpha <- 0.05
#Tipus de contrast bilateral
power <- 0.8
rao <- 1
sd <- 10
dif <- 0.3
perdues <- 0.1
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "unbalanced", variance = "equal")
install.packages(c("SampleSizeMeans", "SampleSizeProportions", "Sample.Size"))
#Medias
library(samplesize)
alpha <- 0.05
#Tipus de contrast bilateral
power <- 0.8
rao <- 1
sd <- 10
dif <- 0.3
perdues <- 0.1
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "paired", fraction = "balanced", variance = "equal")
rao <- 4
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "paired", fraction = "unbalanced", variance = "equal")
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "paired", fraction = "balanced", variance = "equal")
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd,
design = "paired", fraction = "balanced", variance = "equal")
alpha <- 0.05
#Tipus de contrast bilateral
power <- 0.8
rao <- 1
sd <- 10
dif <- 0.3
perdues <- 0.1
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "balanced", variance = "equal")
install.packages("manipulate")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
library(shiny)
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
#1.1 Medias (t-test)#
library(samplesize)
alpha <- 0.05
#Tipus de contrast bilateral
power <- 0.8
rao <- 1
sd <- 10
dif <- 0.3
perdues <- 0.1
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "balanced", variance = "equal")
rao <- 4
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "unbalanced", variance = "equal")
aux <- n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "unbalanced", variance = "equal")
aux
class(aux)
aux[[1]]
aux[[2]]
aux[[3]]
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "unbalanced", variance = "equal")
aux <-n.ttest(power = power, alpha = alpha, mean.diff = dif, sd1 = sd, k = rao,
design = "unpaired", fraction = "unbalanced", variance = "equal")
aux[[2]]
aux[[3]]
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
?n.ttest
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
?elseif
?else
?ifelse
?ifelse
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
paste("hola")
aux <- 5555
paste("hola", aux)
paste("hola", bold(aux))
paste("hola", Bold(aux))
paste("hola", bold(as.character(aux)))
paste("hola", Bold(as.character(aux)))
expression("hola", Bold(as.character(aux)))
expression(paste(hola", Bold(as.character(aux)))
)
)
expression(paste(bold("Hello"), " world")), font.main= 1).
expression(paste(bold("Hello"), " world")), font.main= 1)
expression(paste(bold("Hello"), " world")))
expression(paste(bold("Hello"), " world"))
paste("hola", bold(as.character(aux)))
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
floor(1.5)
floor(1.7)
ceil(1.7)
?floor
ceiling(1.7)
ceiling(1.3)
ceiling(2.3)
ceiling(2.3)
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")ç
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
library(shiny)
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/Shiny_v2")
library(shiny)
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
library(devtools)
library(slidify)
setwd(C:/Users/CASA/Dropbox/Coursera/Project/Slidify_v1)
setwd(C:/Users/CASA/Dropbox/Coursera/Project/Slidify_v1)
setwd("C:/Users/CASA/Dropbox/Coursera/Project/Slidify_v1")
library(shinyapps)
shinyapps::setAccountInfo(
name="mmari",
token="81453FDC0CA590890404CCA11CC4A1E7",
secret="489r5q9y5TGqczun3+0JCwD9EStAgbECnd8zbmbu")
deployApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
library(samplesize)
power = 1-0.2
n.ttest(power = power, alpha = 0.05, mean.diff = 1, sd1 = 10, k = 2,
design = "unpaired", fraction = "unbalanced", variance = "equal")
library(shiny)
runApp("C:/Users/CASA/Dropbox/Coursera/Project/sample")
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
setwd("C:/Users/CASA/Dropbox/Coursera/Project/Slidify_v2")
author("Sample_size")
